import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, TouchableOpacity, ScrollView, Alert, ActivityIndicator, Modal, TextInput } from 'react-native';
import { useEffect, useState } from 'react';
import { api, Habit, isAuthenticated } from './services/api';

// –¢–∏–ø—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
type Screen = 'habits' | 'stats' | 'analytics' | 'profile' | 'groups';

export default function App() {
  const [habits, setHabits] = useState<Habit[]>([]);
  const [loading, setLoading] = useState(true);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [showAddModal, setShowAddModal] = useState(false);
  const [newHabitName, setNewHabitName] = useState('');
  const [newHabitDescription, setNewHabitDescription] = useState('');
  const [currentScreen, setCurrentScreen] = useState<Screen>('habits');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    if (isAuthenticated()) {
      setIsLoggedIn(true);
      await loadHabits();
    } else {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
      await handleLogin();
    }
  };

  const handleLogin = async () => {
    try {
      setLoading(true);
      await api.login('demo', 'demo12345');
      setIsLoggedIn(true);
      await loadHabits();
    } catch (error) {
      console.error('Login error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    } finally {
      setLoading(false);
    }
  };

  const loadHabits = async () => {
    try {
      setLoading(true);
      const data = await api.getHabits();
      console.log('API Response:', data); // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (data && Array.isArray(data)) {
        setHabits(data);
      } else if (data && typeof data === 'object' && 'results' in data && Array.isArray((data as any).results)) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        setHabits((data as any).results);
      } else {
        console.error('Unexpected data format:', data);
        setHabits([]);
      }
    } catch (error) {
      console.error('Load habits error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏');
      setHabits([]);
    } finally {
      setLoading(false);
    }
  };

  const handleHabitToggle = async (habitId: string) => {
    try {
      const response = await api.markHabitComplete(habitId);
      
      // –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      if (response.completed_today) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', response.message);
      }
      
      // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI
      await loadHabits();
    } catch (error) {
      console.error('Toggle habit error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  };

  const handleAddHabit = async () => {
    if (!newHabitName.trim()) {
      Alert.alert('–û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏');
      return;
    }

    try {
      await api.createHabit({
        name: newHabitName.trim(),
        description: newHabitDescription.trim(),
        habit_type: 'boolean',
        frequency: 'daily'
      });
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setNewHabitName('');
      setNewHabitDescription('');
      setShowAddModal(false);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
      await loadHabits();
      
      Alert.alert('–£—Å–ø–µ—Ö', '–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    } catch (error) {
      console.error('Add habit error:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —ç–∫—Ä–∞–Ω–æ–≤
  const renderScreen = () => {
    switch (currentScreen) {
      case 'habits':
        return (
          <ScrollView>
            <View style={styles.header}>
              <View style={styles.headerContent}>
                <View>
                  <Text style={styles.title}>üéØ Habit Tracker</Text>
                  <Text style={styles.subtitle}>–¢–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è</Text>
                </View>
                <TouchableOpacity
                  style={styles.addButton}
                  onPress={() => setShowAddModal(true)}
                >
                  <Text style={styles.addButtonText}>+</Text>
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.habitsList}>
              {habits.map((habit) => (
                <TouchableOpacity
                  key={habit.id}
                  style={styles.habitCard}
                  onPress={() => handleHabitToggle(habit.id)}
                >
                  <View style={styles.habitInfo}>
                    <Text style={styles.habitName}>{habit.name}</Text>
                    <Text style={styles.habitDescription}>{habit.description}</Text>
                    <Text style={styles.habitStreak}>üî• {habit.streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥</Text>
                    {habit.group && (
                      <Text style={[styles.habitGroup, { color: habit.group.color }]}>
                        üìÅ {habit.group.name}
                      </Text>
                    )}
                  </View>
                  <View style={[
                    styles.habitStatus,
                    { backgroundColor: habit.is_completed_today ? '#4CAF50' : '#E0E0E0' }
                  ]}>
                    <Text style={styles.statusText}>
                      {habit.is_completed_today ? '‚úÖ' : '‚≠ï'}
                    </Text>
                  </View>
                </TouchableOpacity>
              ))}
            </View>
          </ScrollView>
        );
      
      case 'stats':
        return (
          <View style={styles.screenContainer}>
            <Text style={styles.screenTitle}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
            <Text style={styles.screenText}>–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Text>
          </View>
        );
      
      case 'analytics':
        return (
          <View style={styles.screenContainer}>
            <Text style={styles.screenTitle}>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Text>
            <Text style={styles.screenText}>–ó–¥–µ—Å—å –±—É–¥—É—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã</Text>
          </View>
        );
      
      case 'profile':
        return (
          <View style={styles.screenContainer}>
            <Text style={styles.screenTitle}>üë§ –ü—Ä–æ—Ñ–∏–ª—å</Text>
            <Text style={styles.screenText}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Text>
          </View>
        );
      
      case 'groups':
        return (
          <View style={styles.screenContainer}>
            <Text style={styles.screenTitle}>üìÅ –ì—Ä—É–ø–ø—ã</Text>
            <Text style={styles.screenText}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–∏–≤—ã—á–µ–∫</Text>
          </View>
        );
      
      default:
        return null;
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4CAF50" />
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      {renderScreen()}

      <StatusBar style="auto" />

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <View style={styles.bottomNavigation}>
        <TouchableOpacity
          style={[styles.navItem, currentScreen === 'habits' && styles.navItemActive]}
          onPress={() => setCurrentScreen('habits')}
        >
          <Text style={[styles.navIcon, currentScreen === 'habits' && styles.navIconActive]}>üéØ</Text>
          <Text style={[styles.navText, currentScreen === 'habits' && styles.navTextActive]}>–ü—Ä–∏–≤—ã—á–∫–∏</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.navItem, currentScreen === 'stats' && styles.navItemActive]}
          onPress={() => setCurrentScreen('stats')}
        >
          <Text style={[styles.navIcon, currentScreen === 'stats' && styles.navIconActive]}>üìä</Text>
          <Text style={[styles.navText, currentScreen === 'stats' && styles.navTextActive]}>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.navItem, currentScreen === 'analytics' && styles.navItemActive]}
          onPress={() => setCurrentScreen('analytics')}
        >
          <Text style={[styles.navIcon, currentScreen === 'analytics' && styles.navIconActive]}>üìà</Text>
          <Text style={[styles.navText, currentScreen === 'analytics' && styles.navTextActive]}>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.navItem, currentScreen === 'groups' && styles.navItemActive]}
          onPress={() => setCurrentScreen('groups')}
        >
          <Text style={[styles.navIcon, currentScreen === 'groups' && styles.navIconActive]}>üìÅ</Text>
          <Text style={[styles.navText, currentScreen === 'groups' && styles.navTextActive]}>–ì—Ä—É–ø–ø—ã</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={[styles.navItem, currentScreen === 'profile' && styles.navItemActive]}
          onPress={() => setCurrentScreen('profile')}
        >
          <Text style={[styles.navIcon, currentScreen === 'profile' && styles.navIconActive]}>üë§</Text>
          <Text style={[styles.navText, currentScreen === 'profile' && styles.navTextActive]}>–ü—Ä–æ—Ñ–∏–ª—å</Text>
        </TouchableOpacity>
      </View>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ */}
      <Modal
        visible={showAddModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowAddModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É</Text>
            
            <TextInput
              style={styles.input}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"
              value={newHabitName}
              onChangeText={setNewHabitName}
              maxLength={100}
            />
            
            <TextInput
              style={styles.input}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={newHabitDescription}
              onChangeText={setNewHabitDescription}
              multiline
              numberOfLines={3}
              maxLength={500}
            />
            
            <View style={styles.modalButtons}>
              <TouchableOpacity 
                style={[styles.modalButton, styles.cancelButton]}
                onPress={() => {
                  setShowAddModal(false);
                  setNewHabitName('');
                  setNewHabitDescription('');
                }}
              >
                <Text style={styles.cancelButtonText}>–û—Ç–º–µ–Ω–∞</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={[styles.modalButton, styles.saveButton]}
                onPress={handleAddHabit}
              >
                <Text style={styles.saveButtonText}>–î–æ–±–∞–≤–∏—Ç—å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  header: {
    padding: 20,
    paddingTop: 60,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  addButton: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  addButtonText: {
    fontSize: 24,
    color: '#fff',
    fontWeight: 'bold',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  habitsList: {
    padding: 20,
  },
  habitCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 2,
  },
  habitInfo: {
    flex: 1,
  },
  habitName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  habitDescription: {
    fontSize: 14,
    color: '#888',
    marginBottom: 4,
  },
  habitStreak: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  habitGroup: {
    fontSize: 12,
    fontWeight: '500',
  },
  habitStatus: {
    width: 50,
    height: 50,
    borderRadius: 25,
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 12,
  },
  statusText: {
    fontSize: 20,
  },
  // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    width: '90%',
    maxWidth: 400,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    fontSize: 16,
    backgroundColor: '#f9f9f9',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  modalButton: {
    flex: 1,
    padding: 12,
    borderRadius: 8,
    marginHorizontal: 5,
  },
  cancelButton: {
    backgroundColor: '#f0f0f0',
  },
  saveButton: {
    backgroundColor: '#4CAF50',
  },
  cancelButtonText: {
    color: '#666',
    textAlign: 'center',
    fontSize: 16,
    fontWeight: '600',
  },
  saveButtonText: {
    color: '#fff',
    textAlign: 'center',
    fontSize: 16,
    fontWeight: '600',
  },
  
  // –°—Ç–∏–ª–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–æ–≤
  screenContainer: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  screenTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  screenText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  bottomNavigation: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
    paddingVertical: 10,
    paddingHorizontal: 5,
  },
  navItem: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
  },
  navItemActive: {
    backgroundColor: '#F0F8FF',
    borderRadius: 8,
  },
  navIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  navIconActive: {
    color: '#4CAF50',
  },
  navText: {
    fontSize: 12,
    color: '#666',
  },
  navTextActive: {
    color: '#4CAF50',
    fontWeight: 'bold',
  },
});
