import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text } from 'react-native-paper';
import { theme } from '../../theme/theme';
import { getMutedColor } from '../../utils/colors';
// import { formatDate } from '../../utils/format'; // ‚Üê –£–î–ê–õ–ï–ù–û: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

interface HabitGridProps {
  habitId: string;
  color: string;
  completions: Array<string | { id: string; date: string; status: string }>; // –º–∞—Å—Å–∏–≤ –¥–∞—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–æ–≥–æ–≤
  weeks?: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  showLegend?: boolean; // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ª–µ–≥–µ–Ω–¥—É
  highlightCurrentDay?: boolean; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–ø—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
  weekStartsOn?: string; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
}



export const HabitGrid: React.FC<HabitGridProps> = ({
  habitId,
  color,
  completions,
  weeks = 20, // 20 —Å—Ç–æ–ª–±—Ü–æ–≤
  showLegend = true, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
  highlightCurrentDay = true, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
  weekStartsOn = 'monday' // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
}) => {
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  const [currentDate, setCurrentDate] = React.useState(new Date());
  
  React.useEffect(() => {
    setCurrentDate(new Date());
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–µ–¥–µ–ª—å
  const generateWeeks = () => {
         const weeksArray = [];
     const today = currentDate;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
    const completedDates = completions
      .filter(completion => {
        if (typeof completion === 'string') {
          return true; // —Å—Ç—Ä–æ–∫–∞ = –¥–∞—Ç–∞
        } else if (completion && completion.date) {
          return completion.status === 'completed';
        }
        return false;
      })
      .map(completion => {
        if (typeof completion === 'string') {
          return completion;
        } else {
          return completion.date;
        }
      });
    
         // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –∏ —Å–¥–≤–∏–≥–∞–µ–º —Å–µ—Ç–∫—É
     const getStartOfWeek = (date: Date, weekStartsOn: string) => {
       const dayOfWeek = date.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ...
       const weekStartMap: { [key: string]: number } = {
         'sunday': 0,
         'monday': 1,
         'tuesday': 2,
         'wednesday': 3,
         'thursday': 4,
         'friday': 5,
         'saturday': 6,
       };
       
       const targetDay = weekStartMap[weekStartsOn] || 1; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
       const daysToSubtract = (dayOfWeek - targetDay + 7) % 7;
       
       const startOfWeek = new Date(date);
       startOfWeek.setDate(date.getDate() - daysToSubtract);
       return startOfWeek;
     };
     
     // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫) –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     const getStandardWeekStart = (date: Date) => {
       const dayOfWeek = date.getDay();
       const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;
       const monday = new Date(date);
       monday.setDate(date.getDate() - daysToMonday);
       return monday;
     };
     
     const currentWeekStart = getStartOfWeek(today, weekStartsOn);
     const standardWeekStart = getStandardWeekStart(today);
     
     // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –≤—ã—á–∏—Å–ª—è–µ–º —Å–¥–≤–∏–≥ –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º
     const weekShift = Math.floor((currentWeekStart.getTime() - standardWeekStart.getTime()) / (1000 * 60 * 60 * 24));
     
     // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
     // console.log('üîç HabitGrid Debug:', {
     //   today: today.toISOString().split('T')[0],
     //   weekStartsOn,
     //   currentWeekStart: currentWeekStart.toISOString().split('T')[0],
     //   standardWeekStart: standardWeekStart.toISOString().split('T')[0],
     //   weekShift,
     //   todayDayOfWeek: today.getDay(),
     // });
     
     // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –∏–¥–µ–º –Ω–∞–∑–∞–¥ –ø–æ –Ω–µ–¥–µ–ª—è–º, –ø—Ä–∏–º–µ–Ω—è—è —Å–¥–≤–∏–≥ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
     for (let week = 0; week < weeks; week++) {
       const weekDays = [];
       const weekStart = new Date(standardWeekStart);
       weekStart.setDate(standardWeekStart.getDate() - (weeks - week - 1) * 7 + weekShift);
      
             for (let day = 0; day < 7; day++) {
         const date = new Date(weekStart);
         date.setDate(weekStart.getDate() + day);
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        const dateString = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
        
                 const isCompleted = completedDates.includes(dateString);
         // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
         const todayString = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
         const isFuture = dateString > todayString; // –ë—É–¥—É—â–∏–µ –¥–Ω–∏ = —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ —Å–µ–≥–æ–¥–Ω—è (–Ω–µ –≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
         

        

        

        
        const isToday = dateString === todayString; // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        
        weekDays.push({
          date: dateString,
          completed: isCompleted,
          future: isFuture,
          isToday: isToday, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
          dateString: dateString,
          todayString: todayString
        });
      }
      weeksArray.push(weekDays);
    }
    
    return weeksArray;
  };

  const weeksData = generateWeeks();
  


  return (
    <View style={styles.container}>
      <View style={styles.grid}>
        {weeksData.map((week, weekIndex) => (
          <View key={weekIndex} style={styles.week}>
            {week.map((day, dayIndex) => {
              // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π
              const mutedColor = getMutedColor(color);
              
              return (
                <View
                  key={dayIndex}
                  style={[
                    styles.day,
                    { backgroundColor: mutedColor },
                    day.completed && { backgroundColor: color },
                    highlightCurrentDay && day.isToday && styles.today // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                  ]}
                />
              );
            })}
          </View>
        ))}
      </View>
      {showLegend && (
        <Text style={styles.legend}>
          {completions.filter(c => 
            typeof c === 'string' || (c && c.status === 'completed')
          ).length} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ {weeks} –Ω–µ–¥–µ–ª—å
        </Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    // –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–∞–¥–¥–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–ª–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    marginHorizontal: -16, // –±–æ–ª—å—à–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
    paddingHorizontal: 8, // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–Ω—É—Ç—Ä–∏
    paddingBottom: 8, // —Ç–∞–∫–æ–π –∂–µ –æ—Ç—Å—Ç—É–ø –∫–∞–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    marginVertical: 2, // —É–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
  },
  grid: {
    flexDirection: 'row',
    gap: 2, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏
    flex: 1,
    width: '100%',
    alignSelf: 'stretch',
  },
  week: {
    gap: 2, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –¥–Ω—è–º–∏
    flex: 1, // –ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
  },
  day: {
    flex: 1, // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —à–∏—Ä–∏–Ω—É
    aspectRatio: 1, // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    borderRadius: 3,
    margin: 0.5,
    // —É–±—Ä–∞–Ω—ã maxWidth/maxHeight, —á—Ç–æ–±—ã —Å–µ—Ç–∫–∞ –º–æ–≥–ª–∞ –∑–∞–ø–æ–ª–Ω—è—Ç—å –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
  },
  today: {
    borderWidth: 2,
    borderColor: '#ffffff', // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –±–µ–ª–∞—è —Ä–∞–º–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
  },
  // –ø—É—Å—Ç—ã—Ö –¥–Ω–µ–π –Ω–µ—Ç ‚Äî –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –∑–∞–¥–∞—ë—Ç—Å—è –≤ day
  future: {},
  legend: {
    fontSize: 12,
    color: theme.colors.text.secondary,
    marginTop: 8,
    textAlign: 'center',
  },
});
