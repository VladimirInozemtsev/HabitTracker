import React from 'react';
import { View, ScrollView, TouchableOpacity } from 'react-native';
import { Text, Button, Switch, Portal, Dialog, TextInput, IconButton } from 'react-native-paper';
import { useApp } from '../../context/AppContext';
import { createRemindersModalStyles } from '../../theme/styles/remindersModalStyles';
import { TimePickerModal } from './TimePickerModal';

interface RemindersModalProps {
  visible: boolean;
  onClose: () => void;
  onSave: (settings: ReminderSettings) => void;
  currentSettings: ReminderSettings;
}

export interface ReminderSettings {
  enabled: boolean;
  days: string[];
  time: string;
  title: string;
  message: string;
}

export const RemindersModal: React.FC<RemindersModalProps> = ({
  visible,
  onClose,
  onSave,
  currentSettings,
}) => {
  const { theme } = useApp();
  const [settings, setSettings] = React.useState<ReminderSettings>(currentSettings);
  const [showTimePicker, setShowTimePicker] = React.useState(false);
  const styles = createRemindersModalStyles(theme);

  const daysOfWeek = [
    { key: 'mon', label: '–ü–Ω', fullName: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
    { key: 'tue', label: '–í—Ç', fullName: '–í—Ç–æ—Ä–Ω–∏–∫' },
    { key: 'wed', label: '–°—Ä', fullName: '–°—Ä–µ–¥–∞' },
    { key: 'thu', label: '–ß—Ç', fullName: '–ß–µ—Ç–≤–µ—Ä–≥' },
    { key: 'fri', label: '–ü—Ç', fullName: '–ü—è—Ç–Ω–∏—Ü–∞' },
    { key: 'sat', label: '–°–±', fullName: '–°—É–±–±–æ—Ç–∞' },
    { key: 'sun', label: '–í—Å', fullName: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' },
  ];

  const handleToggleEnabled = () => {
    setSettings(prev => ({ ...prev, enabled: !prev.enabled }));
  };

  const handleDayToggle = (dayKey: string) => {
    setSettings(prev => ({
      ...prev,
      days: prev.days.includes(dayKey)
        ? prev.days.filter(d => d !== dayKey)
        : [...prev.days, dayKey]
    }));
  };

  const handleTimePress = () => {
    setShowTimePicker(true);
  };

  const handleTimeSave = (time: string) => {
    setSettings(prev => ({ ...prev, time }));
  };

  const handleSave = () => {
    onSave(settings);
    onClose();
  };

  return (
    <Portal>
      <Dialog 
        visible={visible} 
        onDismiss={onClose}
        style={{ backgroundColor: theme.colors.surface }}
      >
        <Dialog.Title style={styles.modalTitle}>
          –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        </Dialog.Title>
        <Dialog.Content style={styles.modalContent}>
          <ScrollView style={styles.contentScroll}>
            <Text style={styles.description}>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫.
            </Text>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∏—è */}
            <View style={styles.toggleContainer}>
              <Text style={styles.toggleLabel}>
                –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
              </Text>
              <Switch
                value={settings.enabled}
                onValueChange={handleToggleEnabled}
                color={theme.colors.icons.purple}
                trackColor={{
                  false: theme.colors.divider,
                  true: theme.colors.icons.purple,
                }}
              />
            </View>

            {/* –í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ */}
            <View style={styles.daysContainer}>
              <Text style={styles.sectionTitle}>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏</Text>
              <View style={styles.daysGrid}>
                {daysOfWeek.map((day) => (
                  <IconButton
                    key={day.key}
                    icon={settings.days.includes(day.key) ? 'check' : 'circle-outline'}
                    size={24}
                    iconColor={settings.days.includes(day.key) ? theme.colors.primary : theme.colors.text.secondary}
                    style={[
                      styles.dayButton,
                      settings.days.includes(day.key) && styles.dayButtonActive
                    ]}
                    onPress={() => handleDayToggle(day.key)}
                  />
                ))}
              </View>
              <View style={styles.daysLabels}>
                {daysOfWeek.map((day) => (
                  <Text key={day.key} style={styles.dayLabel}>
                    {day.label}
                  </Text>
                ))}
              </View>
            </View>

            {/* –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ */}
            <View style={styles.timeContainer}>
              <Text style={styles.sectionTitle}>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</Text>
              <TouchableOpacity 
                style={styles.timePicker}
                onPress={handleTimePress}
                activeOpacity={0.7}
              >
                <IconButton
                  icon="clock-outline"
                  size={24}
                  iconColor={theme.colors.text.primary}
                />
                <Text style={styles.timeText}>{settings.time}</Text>
              </TouchableOpacity>
            </View>

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è */}
            <View style={styles.customFieldsContainer}>
              <Text style={styles.sectionTitle}>–ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Text>
              
              <TextInput
                label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                value={settings.title}
                onChangeText={(text) => setSettings(prev => ({ ...prev, title: text }))}
                style={styles.textInput}
                textColor={theme.colors.text.primary}
                contentStyle={{ color: theme.colors.text.primary }}
              />
              
              <TextInput
                label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                value={settings.message}
                onChangeText={(text) => setSettings(prev => ({ ...prev, message: text }))}
                style={styles.textInput}
                textColor={theme.colors.text.primary}
                contentStyle={{ color: theme.colors.text.primary }}
                multiline
              />
            </View>
            {/* –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <View style={{ marginTop: 16, paddingHorizontal: 16 }}>
              <Button
                mode="outlined"
                onPress={() => onSave(settings)}
                textColor={theme.colors.primary}
                style={{ borderColor: theme.colors.primary }}
              >
                üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              </Button>
            </View>
          </ScrollView>
        </Dialog.Content>
        <Dialog.Actions style={styles.actionsContainer}>
          <Button 
            onPress={onClose} 
            style={styles.actionButton}
            textColor={theme.colors.text.primary}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            onPress={handleSave} 
            style={styles.actionButton}
            textColor={theme.colors.text.primary}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </Dialog.Actions>
      </Dialog>

      {/* TimePicker Modal */}
      <TimePickerModal
        visible={showTimePicker}
        onClose={() => setShowTimePicker(false)}
        onSave={handleTimeSave}
        currentTime={settings.time}
        theme={theme}
      />
    </Portal>
  );
};
